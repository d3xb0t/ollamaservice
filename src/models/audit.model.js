/**
 * Audit model.
 * Defines the Mongoose schema and model for storing audit logs in MongoDB.
 * This module provides the data structure for recording detailed information
 * about all requests processed by the application for security, debugging,
 * and monitoring purposes.
 * 
 * Audit Logging Features:
 * 1. Request Tracking: Unique request identification
 * 2. Request Details: Method, URL, headers, body, etc.
 * 3. Response Information: Status code, response time
 * 4. Client Information: IP address, user agent
 * 5. Timestamps: Precise request timing
 * 6. Indexing: Efficient querying by request ID
 * 
 * Design Pattern: Audit Log Entity
 * This module implements the Audit Log Entity pattern,
 * providing a structured approach to storing comprehensive
 * information about system interactions for compliance,
 * security analysis, and debugging.
 * 
 * Data Retention:
 * - Audit logs are stored indefinitely
 * - Should be archived or purged based on policy
 * - Indexes optimize query performance
 * 
 * Security Considerations:
 * - Sensitive data should be excluded from logs
 * - Logs should be protected from unauthorized access
 * - Log integrity should be maintained
 * 
 * @file
 * @module models/audit
 * @author ChatBot Backend Team
 * @since 1.0.0
 * @copyright 2025 ChatBot Project
 * @license MIT
 * @see {@link https://mongoosejs.com/docs/guide.html} Mongoose Schemas
 * @see {@link https://www.mongodb.com/docs/manual/core/data-models/} MongoDB Data Models
 */

import { Schema, model } from 'mongoose'

/**
 * Mongoose schema for audit logs.
 * Defines the structure and validation rules for audit log entries.
 * This schema ensures consistent data storage and retrieval for audit information.
 * 
 * Schema Design Principles:
 * 1. Comprehensive Coverage: All relevant request/response information
 * 2. Data Types: Appropriate types for each field
 * 3. Validation: Required fields and constraints
 * 4. Indexing: Optimized for common queries
 * 5. Flexibility: Optional fields for variable data
 * 
 * Field Categories:
 * 1. Identifiers: requestId
 * 2. Timestamps: timestamp
 * 3. Request Info: method, url, headers, body, query, params
 * 4. Client Info: ip, userAgent
 * 5. Response Info: responseStatus, responseTime
 * 6. User Info: userId
 * 
 * @type {Schema}
 * @constant {Schema}
 * @memberof module:models/audit
 * @since 1.0.0
 */
const auditSchema = new Schema({
  /**
   * Unique identifier for the request.
   * This ID is generated by the traceability middleware and is used
   * to correlate all log entries related to a single request.
   * 
   * Characteristics:
   * - Universally unique
   * - Generated per request
   * - Used for cross-referencing
   * - Indexed for fast lookups
   * 
   * Format:
   * - UUID v4 (random)
   * - 36 characters (32 hex + 4 hyphens)
   * - Example: "f47ac10b-58cc-4372-a567-0e02b2c3d479"
   */
  requestId: {
    type: String,
    required: true,
    index: true
  },
  
  /**
   * Timestamp when the audit entry was created.
   * This represents when the request was processed by the system.
   * 
   * Characteristics:
   * - ISO 8601 format
   * - UTC timezone
   * - Millisecond precision
   * - Automatically set if not provided
   * 
   * Use Cases:
   * - Request timing analysis
   * - Performance monitoring
   * - Security incident investigation
   * - Compliance reporting
   */
  timestamp: {
    type: Date,
    default: Date.now,
    required: true
  },
  
  /**
   * HTTP method of the request.
   * Indicates the type of HTTP operation performed.
   * 
   * Common Values:
   * - GET: Retrieve resource
   * - POST: Create resource
   * - PUT: Update resource
   * - DELETE: Remove resource
   * - PATCH: Partial update
   * 
   * Security Considerations:
   * - Monitored for unusual patterns
   * - Used for access control analysis
   */
  method: {
    type: String,
    required: true
  },
  
  /**
   * URL of the request.
   * The full path including query parameters that was requested.
   * 
   * Format:
   * - Absolute or relative path
   * - Includes query string
   * - Excludes protocol and host
   * 
   * Examples:
   * - "/api/chat"
   * - "/api/users?id=123"
   */
  url: {
    type: String,
    required: true
  },
  
  /**
   * HTTP headers of the request.
   * Contains all headers sent by the client with the request.
   * 
   * Security Information:
   * - Authorization headers are excluded
   * - Sensitive data should be filtered
   * - Useful for client identification
   * 
   * Common Headers:
   * - User-Agent
   * - Content-Type
   * - Accept
   * - Referer
   */
  headers: {
    type: Object,
    required: false
  },
  
  /**
   * Request body data.
   * The payload sent by the client with the request.
   * 
   * Data Handling:
   * - Sensitive information should be excluded
   * - Large bodies may be truncated
   * - Format depends on Content-Type
   * 
   * Common Formats:
   * - JSON (application/json)
   * - Form data (application/x-www-form-urlencoded)
   * - Binary data (multipart/form-data)
   */
  body: {
    type: Object,
    required: false
  },
  
  /**
   * Query parameters of the request.
   * Key-value pairs from the URL query string.
   * 
   * Format:
   * - Object with string keys and values
   * - Multiple values represented as arrays
   * - URL decoded
   * 
   * Example:
   * For URL "/api/users?name=john&age=25"
   * query = { name: "john", age: "25" }
   */
  query: {
    type: Object,
    required: false
  },
  
  /**
   * Route parameters of the request.
   * Key-value pairs from the URL path parameters.
   * 
   * Usage:
   * - RESTful API resource identification
   * - Dynamic URL segments
   * 
   * Example:
   * For route "/api/users/:id" and URL "/api/users/123"
   * params = { id: "123" }
   */
  params: {
    type: Object,
    required: false
  },
  
  /**
   * IP address of the client.
   * The network address of the request originator.
   * 
   * Formats:
   * - IPv4: "192.168.1.1"
   * - IPv6: "2001:0db8:85a3:0000:0000:8a2e:0370:7334"
   * 
   * Security Considerations:
   * - May be spoofed
   * - May be behind proxy/NAT
   * - Useful for access control
   */
  ip: {
    type: String,
    required: false
  },
  
  /**
   * User agent string of the client.
   * Identifies the client software making the request.
   * 
   * Information Content:
   * - Browser/Client name and version
   * - Operating system
   * - Device information
   * - Engine details
   * 
   * Example:
   * "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36"
   */
  userAgent: {
    type: String,
    required: false
  },
  
  /**
   * HTTP status code of the response.
   * Indicates the result of request processing.
   * 
   * Code Categories:
   * - 1xx: Informational
   * - 2xx: Success
   * - 3xx: Redirection
   * - 4xx: Client Error
   * - 5xx: Server Error
   * 
   * Common Codes:
   * - 200: OK
   * - 400: Bad Request
   * - 404: Not Found
   * - 500: Internal Server Error
   */
  responseStatus: {
    type: Number,
    required: true
  },
  
  /**
   * Response time in milliseconds.
   * Time taken to process the request and generate a response.
   * 
   * Performance Metrics:
   * - Request processing duration
   * - System performance indicator
   * - SLA compliance monitoring
   * 
   * Calculation:
   * - End time minus start time
   * - Measured in milliseconds
   * - Includes all processing time
   */
  responseTime: {
    type: Number,
    required: false
  },
  
  /**
   * User identifier, if available.
   * Associates the request with a specific user when authenticated.
   * 
   * Authentication Context:
   * - Available after successful authentication
   * - May be JWT claim, session ID, or user ID
   * - Useful for user behavior analysis
   * 
   * Formats:
   * - UUID
   * - Email
   * - Numeric ID
   * - Username
   */
  userId: {
    type: String,
    required: false
  }
})

/**
 * Mongoose model for audit logs.
 * Provides an interface to the MongoDB collection for storing audit information.
 * This model enables creation, retrieval, updating, and deletion of audit log entries.
 * 
 * Model Capabilities:
 * 1. Document Creation: new Audit() and save()
 * 2. Query Operations: find, findOne, findById
 * 3. Update Operations: update, findOneAndUpdate
 * 4. Delete Operations: remove, findOneAndRemove
 * 5. Index Utilization: Efficient querying
 * 6. Validation: Schema-based data validation
 * 
 * Collection Information:
 * - Name: audits (pluralized from model name)
 * - Database: Specified in connection string
 * - Indexes: requestId (configured in schema)
 * 
 * @type {Model}
 * @constant {Model}
 * @memberof module:models/audit
 * @since 1.0.0
 * 
 * @example
 * // Create a new audit entry
 * const auditEntry = new Audit({
 *   requestId: "f47ac10b-58cc-4372-a567-0e02b2c3d479",
 *   method: "POST",
 *   url: "/api/chat",
 *   responseStatus: 200
 * });
 * await auditEntry.save();
 * 
 * @example
 * // Find audit entries by request ID
 * const audits = await Audit.find({ requestId: "f47ac10b-58cc-4372-a567-0e02b2c3d479" });
 */
const Audit = model('Audit', auditSchema)

export default Audit