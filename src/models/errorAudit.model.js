/**
 * Error audit model.
 * Defines the Mongoose schema and model for storing error audit logs in MongoDB.
 * This module provides the data structure for recording detailed information
 * about errors that occur in the application for debugging, monitoring,
 * and system reliability purposes.
 * 
 * Error Audit Features:
 * 1. Error Details: Complete error information including stack traces
 * 2. Request Context: Full request information at time of error
 * 3. Temporal Information: Precise error occurrence timestamp
 * 4. Correlation: Request ID linking to audit logs
 * 5. Indexing: Efficient querying by request ID and timestamp
 * 
 * Design Pattern: Error Log Entity
 * This module implements the Error Log Entity pattern,
 * providing a structured approach to storing comprehensive
 * information about system errors for debugging,
 * reliability engineering, and incident response.
 * 
 * Error Classification:
 * - Client Errors (4xx): Invalid requests, authentication issues
 * - Server Errors (5xx): Application bugs, service failures
 * - System Errors: Database issues, network problems
 * - Validation Errors: Schema validation failures
 * 
 * Data Retention:
 * - Error logs are stored indefinitely
 * - Should be archived or purged based on policy
 * - Indexes optimize query performance
 * 
 * Security Considerations:
 * - Sensitive data should be excluded from error logs
 * - Error logs should be protected from unauthorized access
 * - Stack traces should not reveal system internals in production
 * 
 * @file
 * @module models/errorAudit
 * @author ChatBot Backend Team
 * @since 1.0.0
 * @copyright 2025 ChatBot Project
 * @license MIT
 * @see {@link https://mongoosejs.com/docs/guide.html} Mongoose Schemas
 * @see {@link https://www.mongodb.com/docs/manual/core/data-models/} MongoDB Data Models
 * @see {@link https://nodejs.org/api/errors.html} Node.js Errors
 */

import { Schema, model } from 'mongoose'

/**
 * Mongoose schema for error audit logs.
 * Defines the structure and validation rules for error audit log entries.
 * This schema ensures consistent data storage and retrieval for error information.
 * 
 * Schema Design Principles:
 * 1. Complete Error Information: All relevant error details
 * 2. Request Context: Full request information at time of error
 * 3. Data Types: Appropriate types for each field
 * 4. Validation: Required fields and constraints
 * 5. Indexing: Optimized for common queries
 * 6. Security: Exclusion of sensitive information
 * 
 * Field Categories:
 * 1. Identifiers: requestId
 * 2. Timestamps: timestamp
 * 3. Error Info: name, message, stack, statusCode
 * 4. Request Info: method, url, headers, body, query, params, ip, userAgent
 * 
 * @type {Schema}
 * @constant {Schema}
 * @memberof module:models/errorAudit
 * @since 1.0.0
 */
const errorAuditSchema = new Schema({
  /**
   * Unique identifier for the request associated with this error.
   * This ID is generated by the traceability middleware and is used
   * to correlate all log entries related to a single request.
   * 
   * Correlation Benefits:
   * - Link error to request audit log
   * - Trace complete request lifecycle
   * - Identify error patterns
   * - Facilitate debugging
   * 
   * Characteristics:
   * - Universally unique
   * - Generated per request
   * - Used for cross-referencing
   * - Indexed for fast lookups
   * 
   * Format:
   * - UUID v4 (random)
   * - 36 characters (32 hex + 4 hyphens)
   * - Example: "f47ac10b-58cc-4372-a567-0e02b2c3d479"
   */
  requestId: {
    type: String,
    required: true,
    index: true
  },
  
  /**
   * Timestamp when the error audit entry was created.
   * This represents when the error occurred in the system.
   * 
   * Characteristics:
   * - ISO 8601 format
   * - UTC timezone
   * - Millisecond precision
   * - Automatically set if not provided
   * 
   * Use Cases:
   * - Error timing analysis
   * - Incident timeline reconstruction
   * - System reliability monitoring
   * - Compliance reporting
   */
  timestamp: {
    type: Date,
    default: Date.now,
    required: true
  },
  
  /**
   * Detailed error information.
   * Contains the complete error object with all relevant information
   * for debugging and analysis purposes.
   * 
   * Error Object Structure:
   * - name: Error class name
   * - message: Human-readable error description
   * - stack: Stack trace for debugging
   * - statusCode: HTTP status code (if applicable)
   * 
   * Security Considerations:
   * - Stack traces may reveal system internals
   * - Error messages should not expose sensitive data
   * - Production environments may filter details
   */
  error: {
    type: {
      /**
       * Name of the error class.
       * Identifies the type of error that occurred.
       * 
       * Common Error Types:
       * - Error: Generic error
       * - TypeError: Type-related error
       * - ReferenceError: Reference-related error
       * - ValidationError: Schema validation error
       * - ZodError: Zod validation error
       * - CustomError: Application-specific error
       */
      name: String,
      
      /**
       * Human-readable error message.
       * Describes what went wrong in understandable terms.
       * 
       * Message Characteristics:
       * - Should be informative but not expose internals
       * - May be shown to users (for client errors)
       * - Should not contain sensitive data
       * - Useful for debugging and monitoring
       */
      message: String,
      
      /**
       * Stack trace of the error.
       * Shows the call stack leading to the error for debugging.
       * 
       * Stack Trace Information:
       * - Function call sequence
       * - File names and line numbers
       * - Asynchronous call information
       * 
       * Security Considerations:
       * - May reveal file paths and system structure
       * - Should be filtered in production environments
       * - Useful for developers and support teams
       */
      stack: String,
      
      /**
       * HTTP status code associated with the error.
       * Indicates the appropriate HTTP response code for this error.
       * 
       * Status Code Categories:
       * - 4xx: Client errors
       * - 5xx: Server errors
       * - undefined: Non-HTTP errors
       * 
       * Common Codes:
       * - 400: Bad Request
       * - 401: Unauthorized
       * - 403: Forbidden
       * - 404: Not Found
       * - 500: Internal Server Error
       * - 503: Service Unavailable
       */
      statusCode: Number
    },
    required: true
  },
  
  /**
   * Complete request information at time of error.
   * Contains all relevant request data for context when debugging errors.
   * This is a copy of the request audit information.
   * 
   * Request Object Structure:
   * - method: HTTP method
   * - url: Request URL
   * - headers: HTTP headers
   * - body: Request body
   * - query: Query parameters
   * - params: Route parameters
   * - ip: Client IP address
   * - userAgent: Client user agent string
   * 
   * Purpose:
   * - Context for error analysis
   * - Reproduction of error conditions
   * - Security incident investigation
   * - Usage pattern analysis
   */
  request: {
    type: {
      /**
       * HTTP method of the request.
       * Indicates the type of HTTP operation that led to the error.
       * 
       * Common Values:
       * - GET: Retrieve resource
       * - POST: Create resource
       * - PUT: Update resource
       * - DELETE: Remove resource
       * - PATCH: Partial update
       */
      method: String,
      
      /**
       * URL of the request that caused the error.
       * The full path including query parameters that was requested.
       * 
       * Format:
       * - Absolute or relative path
       * - Includes query string
       * - Excludes protocol and host
       * 
       * Examples:
       * - "/api/chat"
       * - "/api/users?id=123"
       */
      url: String,
      
      /**
       * HTTP headers of the request.
       * Contains all headers sent by the client with the request.
       * 
       * Security Information:
       * - Authorization headers are excluded
       * - Sensitive data should be filtered
       * - Useful for client identification
       * 
       * Common Headers:
       * - User-Agent
       * - Content-Type
       * - Accept
       * - Referer
       */
      headers: Object,
      
      /**
       * Request body data that caused the error.
       * The payload sent by the client with the request.
       * 
       * Data Handling:
       * - Sensitive information should be excluded
       * - Large bodies may be truncated
       * - Format depends on Content-Type
       * 
       * Common Formats:
       * - JSON (application/json)
       * - Form data (application/x-www-form-urlencoded)
       * - Binary data (multipart/form-data)
       */
      body: Object,
      
      /**
       * Query parameters of the request.
       * Key-value pairs from the URL query string.
       * 
       * Format:
       * - Object with string keys and values
       * - Multiple values represented as arrays
       * - URL decoded
       * 
       * Example:
       * For URL "/api/users?name=john&age=25"
       * query = { name: "john", age: "25" }
       */
      query: Object,
      
      /**
       * Route parameters of the request.
       * Key-value pairs from the URL path parameters.
       * 
       * Usage:
       * - RESTful API resource identification
       * - Dynamic URL segments
       * 
       * Example:
       * For route "/api/users/:id" and URL "/api/users/123"
       * params = { id: "123" }
       */
      params: Object,
      
      /**
       * IP address of the client.
       * The network address of the request originator.
       * 
       * Formats:
       * - IPv4: "192.168.1.1"
       * - IPv6: "2001:0db8:85a3:0000:0000:8a2e:0370:7334"
       * 
       * Security Considerations:
       * - May be spoofed
       * - May be behind proxy/NAT
       * - Useful for access control
       */
      ip: String,
      
      /**
       * User agent string of the client.
       * Identifies the client software making the request.
       * 
       * Information Content:
       * - Browser/Client name and version
       * - Operating system
       * - Device information
       * - Engine details
       * 
       * Example:
       * "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36"
       */
      userAgent: String
    },
    required: true
  }
})

/**
 * Mongoose model for error audit logs.
 * Provides an interface to the MongoDB collection for storing error information.
 * This model enables creation, retrieval, updating, and deletion of error audit log entries.
 * 
 * Model Capabilities:
 * 1. Document Creation: new ErrorAudit() and save()
 * 2. Query Operations: find, findOne, findById
 * 3. Update Operations: update, findOneAndUpdate
 * 4. Delete Operations: remove, findOneAndRemove
 * 5. Index Utilization: Efficient querying
 * 6. Validation: Schema-based data validation
 * 
 * Collection Information:
 * - Name: erroraudits (pluralized from model name)
 * - Database: Specified in connection string
 * - Indexes: requestId (configured in schema)
 * 
 * @type {Model}
 * @constant {Model}
 * @memberof module:models/errorAudit
 * @since 1.0.0
 * 
 * @example
 * // Create a new error audit entry
 * const errorEntry = new ErrorAudit({
 *   requestId: "f47ac10b-58cc-4372-a567-0e02b2c3d479",
 *   error: {
 *     name: "ValidationError",
 *     message: "Invalid prompt format",
 *     stack: "Error: Invalid prompt format\n at validatePrompt...",
 *     statusCode: 400
 *   },
 *   request: {
 *     method: "POST",
 *     url: "/api/chat",
 *     body: { prompt: "" }
 *   }
 * });
 * await errorEntry.save();
 * 
 * @example
 * // Find error audits by request ID
 * const errorAudits = await ErrorAudit.find({ 
 *   requestId: "f47ac10b-58cc-4372-a567-0e02b2c3d479" 
 * });
 */
const ErrorAudit = model('ErrorAudit', errorAuditSchema)

export default ErrorAudit